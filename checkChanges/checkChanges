#!/bin/bash

if [ $(whoami) == "root" ]; then
	echo "This script cannot be run as root!"
	echo "Recusive removes (rm -r) can be performed"
	exit 1;
fi

#Available params in optstring order
#some getopts doc: https://www.computerhope.com/unix/bash/getopts.htm
#long options hack: https://stackoverflow.com/questions/402377/using-getopts-to-process-long-and-short-command-line-options
color=0
ignore_dot=0
src=()
dst=()
check_file_change_interval=1
check_new_file_interval=1
remote=""
verbose=0
current_version="1.3"

while getopts "s:d:c:n:r:vVh-:" opt; do
    case $opt in
	- )
	    case "${OPTARG}" in
	      color) color=1;;
	      ignore-dot) ignore_dot=1;;
            esac;;
        s )
            #We can check where the dir exists and use realpath. But done later to made it in the same place as dst
	    #if [ ! -d "$OPTARG" ]; then
	    #	echo "$OPTARG not found"
	    #	exit 1
	    #else src+=($(realpath "$OPTARG"))
            #fi;;
            src+=("$OPTARG");;
        d )
	    #We cannot check wheter the dir exists and use realpath here because remote arg could be supplied after this one
	    #if [ ! -d "$OPTARG" ]; then
	    #	echo "$OPTARG not found"
	    #	exit 1
	    #else dst+=($(realpath "$OPTARG"))
	    #fi;;
            dst+=("$OPTARG");;
	c ) check_file_change_interval=$OPTARG;;
	n ) check_new_file_interval=$OPTARG;;
	r )
            ssh -q -o BatchMode=yes  -o StrictHostKeyChecking=no -o ConnectTimeout=5 $OPTARG 'exit 0'
            if [ "$?" != "0" ]; then
                echo "Conectivity test to $OPTARG failed"
                exit 1
            fi
            remote=$OPTARG;;
	v ) verbose=$(($verbose + 1));;
	V )
            echo "checkChanges version : $current_version"
	    exit 0;;
        h )
            echo -e "\e[1m\e[4mRequired args\e[0m:"
            echo "  -s <path/to/src>            : Path to the src folder. All files will be monitorized recusively, excluding dot-starting files/dirs"
	    echo "  -d <path/to/dst>            : Path to the dst folder. Missing folders will be created. Existing files that are not in srcdir will be ignored"
	    echo ""
	    echo -e "\e[1mNote\e[0m: -s and -d must be provided in pairs. There could be as many -s/-d pairs as desired"
	    echo "The fisrt provided -s will be associated with the first provided -d, and so on"
	    echo ""
	    echo "Example : checkChanges -s path/to/src -d path/to/dst"
	    echo "Example : checkChanges -s path/to/src1 -d path/to/dst1 -s path/to/src2 -d path/to/dst2"
	    echo "Example : checkChanges -s path/to/src1 -s path/to/src2 -d path/to/dst1 -d path/to/dst2"
	    echo ""
	    echo -e "\e[1m\e[4mOptional args\e[0m:"
	    echo "  -h                          : Show this help and exit"
	    echo "  -v                          : Increment verbose level (up to 2). Error are always notified"
	    echo "  -V				: Show version and exit"
	    echo "  -c <change_interval>        : Time in seconds between checks for changes in srcfiles. Default 1"
	    echo "  -n <new_interval>           : Time in seconds between checks for new files in srcdirs. Default 1"
	    echo "  -r <remote_host>            : Set remote host. It must be a host present in ~/.shh/config with key access without passphrase"
	    echo "  --color                     : Enable colored output"
	    echo "  --ignore-dot                : Ignore files and directories that start with a dot"
            exit 0
    esac
done

function print_msg() {
	#print_msg msg verboseLevel [green/blue/orange/red/underlinewhite]

	#verboseLevel arg must be >= global verbose level
	if [ ! $verbose -ge $2 ]; then return; fi

	#color arg is used if --color flag is providad when running the script
	if [ $color -gt 0 ] && [ ! -z "$3" ]; then
		case $3 in
			green)		echo -e "\e[92m$1\e[0m";;
			blue)		echo -e "\e[96m$1\e[0m";;
			orange) 	echo -e "\e[38;5;214m$1\e[0m";;
			red)		echo -e "\e[91m$1\e[0m";;
			underlinewhite)	echo -e "\e[4m$1\e[0m";;
			*)		echo -e $1;;
		esac
	else
		echo -e $1
	fi
}

function absolute_path() {
	#absolute_path relative_path
	if [ -z "$1" ]; then
		print_msg "First argument (relative_path) of absolute_path is empty" 0 red
		exit 1
	fi

	if [ -z "$remote" ]; then echo $(ssh $remote "realpath $1")
	else echo $(realpath $1)
	fi
}

function check_dir() {
	#check_dir dst
	if [ -z "$1" ]; then
		print_msg "First argument (dst) of check_dir is empty" 0 red
		exit 1
	fi

	if [ -z "$remote" ]; then
		if [ -d "$1" ]; then echo "0"
		else echo "1"
		fi
	else
		ssh $remote "if [ -d \"$1\" ]; then exit 0; else exit 1; fi"
		echo "$?"
	fi
}

function create_dir() {
	#create_dir dst
	if [ -z "$1" ]; then
		print_msg "First argument (dst) of create_dir is empty" 0 red
		exit 1
	fi

	if [ -z "$remote" ]; then mkdir -p $1
	else ssh $remote "mkdir -p $1"
	fi
}

function check_file() {
	#check_file dst
	if [ -z "$1" ]; then
		print_msg "First argument (dst) of check_file is empty" 0 red
		exit 1
	fi

	if [ -z "$remote" ]; then
		if [ -f "$1" ]; then echo "0"
		else echo "1"
		fi
	else
		ssh $remote "if [ -f \"$1\" ]; then exit 0; else exit 1; fi"
		echo "$?"
	fi
}

function md5_file() {
	#md5_file dst
	if [ -z "$1" ]; then
		print_msg "First argument (dst) of md5_file is empty" 0 red
		exit 1
	fi

	if [ -z "$remote" ]; then
		md5=$(md5sum "$1" | awk '{print $1}')
		echo "$md5"
	else
		md5=$(ssh $remote "cat $1" | md5sum | awk '{print $1}')
		echo "$md5"
	fi
}

function create_file() {
	#create_file src dst
	if [ -z "$1" ]; then
		print_msg "First argument (src) of create_file is empty" 0 red
		exit 1
	fi
	if [ -z "$2" ]; then
		print_msg "Second argument (dst) of create_file is empty" 0 red
		exit 1
	fi

	if [ -z "$remote" ]; then
		cp $1 $2
		print_msg "[+] Created file $2" 1 green
	else
		scp $1 $remote:$2 2>/dev/null 1>&2
		print_msg "[+] Created file $remote:$2" 1 green
	fi
}

function update_file() {
	#update_file src dst
	if [ -z "$1" ]; then
		print_msg "First argument (src) of update_file is empty" 0 red
		exit 1
	fi
	if [ -z "$2" ]; then
		print_msg "Second argument (dst) of update_file im empty" 0 red
		exit 1
	fi

	if [ -z "$remote" ]; then
		cp $1 $2
		print_msg "[*] Updated file $2" 1 blue
	else
		scp $1 $remote:$2 2>/dev/null 1>&2
		print_msg "[*] Updated file $remote:$2" 1 blue
	fi
}

function otherfiles_in_dir() {
	#find_files dir except_file
	if [ -z "$1" ]; then
		print_msg "First argument (dir) of otherfiles_in_dir is empty" 0 red
		exit 1
	fi
	if [ -z "$2" ]; then
		print_msg "Second argument (except_file) of otherfiles_in_dir is empty" 0 red
		exit 1
	fi

	if [ -z "$remote" ]; then otherfiles=$(find $1 -type f | grep -v $2)
	else otherfiles=$(ssh $remote "find $1 -type f" | grep -v $2)
	fi

	if [ -z "$otherfiles" ]; then echo "0"
	else echo "1"
	fi
}

function remove_file() {
	#remove_file file
	if [ -z "$1" ]; then
		print_msg "Argument (file) of remove_file is empty" 0 red
		exit 1
	fi
	if [ "$1" == "/" ]; then
		print_msg "Argument (file) of remove_file is /" 0 red
		exit 1
	fi

	if [ -z "$remote" ]; then
		rm $1
		print_msg "[-] Removed file $1" 1 orange
	else
		ssh $remote "rm $1"
		print_msg "[-] Removed file $remote:$1" 1 orange
	fi
}

function remove_dir() {
	#remove_dir dir
	if [ -z "$1" ]; then
		print_msg "Argument (dir) of remove_dir is empty" 0 red
		exit 1
	fi
	if [ "$1" == "/" ]; then
		print_msg "Argument (dir) of remove_dir is /" 0 red
		exit 1
	fi

	if [ -z "$remote" ]; then
		rm -r $1
		print_msg "[-] Removed folder $1" 1 orange
	else
		ssh $remote "rm -r $1"
		print_msg "[-] Removed folder $remote:$1" 1 orange
	fi
}

#Check that all dirs in src and dst really exists
#Translate them to absolute paths
for i in ${!src[@]}; do
	s="${src[$i]}"
	d="${dst[$i]}"

	if [ ! -d "$s" ]; then
		print_msg "$s : No such directory" 0 red
		exit 1
	else
		src[$i]="$(realpath $s)"
	fi

	if [ "$(check_dir $d)" == "1" ]; then
		if [ -z "$remote" ]; then print_msg "$d : No such directory" 0 red
		else print_msg "$remote:$d : No such directory" 0 red
		fi
		exit 1
	else
		dst[$i]="$(absolute_path $d)"
	fi
done

#Get all the files inside src folders and set path to dst folder
srcfiles=()
dstfiles=()
if [ ${#src[@]} -eq 0 ]; then
	print_msg "No src folders given" 0 red
	print_msg "Use -h option for usage help" 0 white
	exit 1
elif [ ${#src[@]} -ne ${#dst[@]} ]; then
	print_msg "Src and dst has different lenghts" 0 red
	print_msg "Use -h option for usage help" 0 white
	exit 1
else
	#Iterate over all dirs in src
	for i in ${!src[@]}; do
		#Get src and dst dir
		s="${src[$i]}"
		d="${dst[$i]}"

		echo $s
		echo $d
		exit

		#Get all files in src (find files in $s, replace ~ and relative paths to absolute, return relative path to $s)
		ffiles=$(find $s -type f -exec realpath --relative-to $s {} \;)
		if [ -n "${ffiles}" ]; then
			for ff in $ffiles; do
				if [ $ignore_dot -eq 1 ]; then
					#Ignore files/dirs starting with .
					ignore=$(echo $ff | awk '{split($1,a,"/"); for(i in a) if(substr(a[i],1,1) == "."){print "y"; exit 1}}')
					if [[ "$ignore" == "y" ]]; then continue; fi
				fi

				#Add files to srcfiles and dstfiles
				srcfiles+=("$s/$ff")
				dstfiles+=("$d/$ff")

				#Ensure dst dir exists
				relativedir=$(dirname $ff)
				create_dir "$d/$relativedir"
			done
		else
			print_msg "No files found in folder : $s" 1 orange
		fi
	done
fi

#Raise error if no files
if [ ${#srcfiles[@]} -eq 0 ]; then
	print_msg "No files to check" 0 red
	exit 1

#Show config and files
else
	print_msg "Checking files changes every $check_file_change_interval seconds" 2 underlinewhite
	print_msg "Checking new files every $check_new_file_interval seconds :\e[0m" 2 underlinewhite
	print_msg "Checking files :" 2
	for i in ${!srcfiles[@]}; do
		if [ -z "$remote" ]; then print_msg "\t${srcfiles[$i]} ---> ${dstfiles[$i]}" 2
		else print_msg "\t${srcfiles[$i]} ---> $remote:${dstfiles[$i]}" 2
		fi
	done
fi

#Get initial srcfiles md5 and check if they exists in dst
filemd5=()
for i in ${!srcfiles[@]}; do
	#Get md5 for each srcfile and append to array
	md5=$(md5sum "${srcfiles[$i]}" | awk '{print $1}')
	filemd5+=("$md5")

	#Check if that file exists in dstdir
	if [ "$(check_file ${dstfiles[$i]})" == "1" ]; then
		#Copy file if it does not exists
		create_file "${srcfiles[$i]}" "${dstfiles[$i]}"
	else
		#Check if the md5 do not match. Update file it so
		dstmd5=$(md5_file "${dstfiles[$i]}")
		if [ "$md5" != "$dstmd5" ]; then update_file "${srcfiles[$i]}" "${dstfiles[$i]}"; fi
	fi
done

#Infinite loop
print_msg "" 2
print_msg "Starting file monitorizacion" 1 underlinewhite
new_file_timer=0
while true; do
	#Iterate over all srcfile checking for changes
	for i in ${!srcfiles[@]}; do

		#If the file has not been deleted then check for changes
		if [ -f "${srcfiles[$i]}" ]; then
			#Get actual md5 of the file and compare with last one
			#Getting the md5 and updating the file should be as close as posible
			#for avoiding race conditions
			oldmd5=${filemd5[$i]}
			newmd5=$(md5sum "${srcfiles[$i]}" | awk '{print $1}')
			if [ "$newmd5" != "$oldmd5" ]; then
				#Update md5 in the array and file in dstdir
				update_file "${srcfiles[$i]}" "${dstfiles[$i]}"
				filemd5[$i]=$newmd5
			fi

		#The file has been deleted
		else
			#Store in local vars and remove from srcfiles and dstfiles array
			s=${srcfiles[$i]}
			d=${dstfiles[$i]}
			unset "srcfiles[i]"
			unset "dstfiles[i]"

			#Check if just the file was removed or it was a full directory
			#For that, check if there are missing folders in the path
			words=$(echo $s | awk '{n=split($0,a,"/"); for (i=1;i<n;i++) print a[i]}')
			path=""
			missing_folders=0
			for w in $words; do
				path="$path/$w"
				if [ ! -d "$path" ]; then missing_folders=$(($missing_folders + 1)); fi
			done

			#If the removed one was just the file
			if [ $missing_folders -eq 0 ]; then
				remove_file $d

			#If a dir was removed
			else
				#Get the equivalent path in dstdir
				remove_words=($(echo $d | awk '{n=split($0,a,"/"); for(i=1;i<n;i++) print a[i]}'))
				dstpath=""
				for i in ${!remove_words[@]}; do
					dstpath="$dstpath/${remove_words[$i]}"

					#index is >= len of path - missing folders --> equivalent folder of the removed one in src
					if [ $i -ge $((${#remove_words[@]} - $missing_folders)) ]; then
						#Get the dstdir of the removed dir
						ddir=""

						#Iterate through all dirs supied in args and compare with the removed file
						#So we can find in which dir the file is
						for j in ${!dst[@]}; do
							tmp=$(echo "$d" | grep "${dst[$j]}") #tmp is not empty if the file is inside the dir in dst
							if [ ! -z "$tmp" ]; then
								ddir=${dst[$j]};
								break
							fi
						done

						#Ensure that we the dir of the file is found
						if [ -z "$ddir" ]; then
							print_msg "[!] Unexpected error" 0 red
							exit 1
						fi

						#Ensure that the dir to remove is not outside dstdir
						in_dst=$(echo "$dstpath" | grep "$ddir")
						if [ ! -z "$in_dst" ]; then
							#Ensure that the dir has not any other file
							other_files=$(otherfiles_in_dir $dstpath $d)
							if [ "$other_files" == "1" ]; then
								remove_file $d
							else
								remove_file $d
								remove_dir $dstpath
							fi
						else
							print_msg "[!] Removed folder is outside $ddir" 0 red
							exit 1
						fi

						break
					fi
				done
			fi
			#Continue to next file
			continue
		fi
	done

	#Sleep and increment new file timer
	sleep $check_file_change_interval
	new_file_timer=$(($new_file_timer + $check_file_change_interval))

	#Check for new files if timer is gt new file interval
	if [ $new_file_timer -gt $check_new_file_interval ]; then
		new_file_timer=0
		for i in ${!src[@]}; do
			s="${src[$i]}"
			d="${dst[$i]}"
			ffiles=$(find $s -type f -exec realpath --relative-to $s {} \;)
			if [ -n "${ffiles}" ]; then
				for ff in $ffiles; do
					#Ignore files/dirs starting with .
					ignore=$(echo $ff | awk '{split($1,a,"/"); for(i in a) if(substr(a[i],1,1) == "."){print "y"; exit 1}}')
					if [[ "$ignore" == "y" ]]; then continue; fi

					#Check if new file. Append to arrays and ensure dst dir exists
					isnew=$(echo "${srcfiles[@]}" | grep "$s/$ff")
					if [[ -z "$isnew" ]]; then
						srcfiles+=("$s/$ff")
						dstfiles+=("$d/$ff")
						relativedir=$(dirname $ff)

						create_dir "$d/$relativedir"

						#Getting the md5 and updating the file should be as close as possible
						#for avoiding race conditions
						md5=$(md5sum "$s/$ff" | awk '{print $1}')
						create_file "$s/$ff" "$d/$ff"
						print_msg "[?] Created file $d/$ff" 3

						filemd5+=("$md5")
					fi
				done
			fi
		done
	fi
done
